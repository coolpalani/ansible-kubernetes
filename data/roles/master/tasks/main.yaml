---
- name: send templates to master server
  template: src={{ item.src }} dest={{ item.dest }} 
  with_items:
  - { src: 'basic-auth.csv', dest: '/data/kubernetes/conf/basic-auth.csv'}
  - { src: 'bootstrap-token.csv', dest: '/data/kubernetes/conf/bootstrap-token.csv'}
  - { src: 'kube-apiserver.service.template', dest: '/lib/systemd/system/kube-apiserver.service'}
  - { src: 'kube-controller-manager.service.template', dest: '/lib/systemd/system/kube-controller-manager.service'}
  - { src: 'kube-scheduler.service.template', dest: '/lib/systemd/system/kube-scheduler.service'}
  notify: restart master

- name: send cert files to master server
  copy: src=/data/roles/ca/files/csr/{{ item }} dest=/data/kubernetes/ssl/{{ item }}
  with_items:
  - ca.pem
  - ca-key.pem                                                                        
  - ca-config.json
  - kubernetes-csr.json
  - admin-csr.json                                                                                          

- name: send binary file to master server
  copy: src=bin/{{ item }} dest=/data/kubernetes/bin/{{ item }} mode=0755
  with_items:
  - kubectl
  - kube-apiserver
  - kube-controller-manager
  - kube-scheduler

- name: create symbol link
  file: src=/data/kubernetes/bin/kubectl dest=/usr/local/bin/kubectl state=link

- name: create kubernetes certs
  raw: cd /data/kubernetes/ssl && /data/kubernetes/bin/cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json  -profile=kubernetes kubernetes-csr.json | /data/kubernetes/bin/cfssljson -bare kubernetes

- name: create admin certs
  raw: cd /data/kubernetes/ssl && /data/kubernetes/bin/cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json  -profile=kubernetes admin-csr.json | /data/kubernetes/bin/cfssljson -bare admin

- name: set kubectl kubeconfig 
  raw: /data/kubernetes/bin/kubectl config set-cluster kubernetes  --certificate-authority=/data/kubernetes/ssl/ca.pem  --embed-certs=true --server={{ API_SERVER }}

- name: set kubectl client authority
  raw: /data/kubernetes/bin/kubectl config set-credentials admin --client-certificate=/data/kubernetes/ssl/admin.pem --embed-certs=true --client-key=/data/kubernetes/ssl/admin-key.pem

- name: set kubectl context
  raw: /data/kubernetes/bin/kubectl config set-context kubernetes --cluster=kubernetes --user=admin

- name: set kubectl default context
  raw: /data/kubernetes/bin/kubectl config use-context kubernetes



- name: start master service
  service: name={{ item }} state=started
  with_items:
  - kube-apiserver
  - kube-controller-manager
  - kube-scheduler

- name: get clusterrolebinding
  raw: kubectl get clusterrolebinding|grep kubelet-bootstrap
  register: output

- name: create clusterrolebinding
  raw: kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap
  when: output == ""
